import { useRef, useState, useEffect, useContext } from 'react';
import AuthContext from "../contexts/AuthProvider";
import './Register.css';

// import { GoogleLogin } from 'react-google-login';
// import { gapi } from 'gapi-script';

import axios from '../api/axios';
// import FacebookLoginComponent from '../components/User/facebooklogin.component';
import { setEnvironmentData } from 'worker_threads';
const LOGIN_URL = 'http://localhost:3081/api/login'; //should match the backend
const clientId = '386932037035-k8v833noqjk7m4auae0t83vnkrqvvg3t.apps.googleusercontent.com';

const Login = () => {
    const { setAuth } = useContext(AuthContext);
    const userRef = useRef<HTMLInputElement>(null);
    const errRef = useRef<HTMLParagraphElement>(null);

    const [user, setUser] = useState('');
    const [pwd, setPwd] = useState('');
    const [errMsg, setErrMsg] = useState('');
    const [success, setSuccess] = useState(false);
    const [userinformation, setUserInformation] = useState({UserInformation_Name: ""});
    const [listUserInfo, setListUserInfo] = useState({UserInformation_Name: ""})

    const { UserInformation_Name } = userinformation;

    useEffect(() => {
        fetch('http://localhost:3081/api/userinfo').then( res => res.json()).then(data => setUserInformation(data))
    }, [])

    useEffect(() => {
		axios.get(`http://localhost:3081/api/userinformation`).then((response) => {
			setListUserInfo(response.data.foundUser);
            console.log("user info data here ==== " + response.data.foundUser)
		});
	}, []);

    useEffect(() => {
        userRef.current!.focus();
    }, [])

    useEffect(() => {
        setErrMsg('');
    }, [user, pwd])

		// useEffect(() => {
		// 	const initClient = () => {
		// 		gapi.auth2.init({
		// 			clientId: clientId,
		// 			scope: ''
		// 		});
		// 	};
		// 	gapi.load('client:auth2', initClient);
		// });
			
		const onSuccess = (res: any) => {
			console.log('success', res);
		};
			
		const onFailure = (err: string) => {
			console.log('failed', err);
		};

    const handleSubmit = async (e: React.ChangeEvent<any>) => {
        e.preventDefault();

        try {
            const response = await axios.post(LOGIN_URL,
                { UserInformation_Name: user, UserInformation_Password: pwd },
                {
                    headers: { 'Content-Type': 'application/json' },
                    withCredentials: true
                }
            );
            console.log(JSON.stringify(response?.data));
            //console.log(JSON.stringify(response));
            const accessToken = response?.data?.accessToken;
            const roles = response?.data?.roles;
            setAuth({ user, pwd, roles, accessToken });
            setUser('');
            setPwd('');
            setSuccess(true);
        } catch (err: any) {
            if (!err?.response) {
                setErrMsg('No Server Response');
            } else if (err.response?.status === 400) {
                setErrMsg('Missing Username or Password');
            } else if (err.response?.status === 401) {
                setErrMsg('Unauthorized');
            } else {
                setErrMsg('Login Failed');
            }
            errRef.current!.focus();
        }
    }

    return (
        <>
            {success ? (
                <section>
                    <h1>You are logged in!</h1>
                    <br />
                    <p>
                        <a href="#">Go to Home</a>
                    </p>
                </section>
            ) : (
                <section style={{marginTop: '30px', borderRadius: '20px'}}>
                    <p ref={errRef} className={errMsg ? "errmsg" : "offscreen"} aria-live="assertive">{errMsg}</p>
                    <h1>Log In</h1>
                    <form onSubmit={handleSubmit}>
                        <label htmlFor="username">Username:</label>
                        <input
                            type="text"
                            id="username"
                            ref={userRef}
                            autoComplete="off"
                            onChange={(e) => setUser(e.target.value)}
                            value={user}
                            required
                        />

                        <label htmlFor="password">Password:</label>
                        <input
                            type="password"
                            id="password"
                            onChange={(e) => setPwd(e.target.value)}
                            value={pwd}
                            required
                        />
												<p style={{textAlign: 'center', marginTop: '5px', marginBottom: '-3px'}}> or </p>
												{/* <GoogleLogin
            							clientId={clientId}
            							buttonText="Log in with Google"
            							onSuccess={onSuccess}
            							onFailure={onFailure}
            							cookiePolicy={'single_host_origin'}
            							isSignedIn={true}
													style={{textAlign: 'center'}}
          							/> */}
												{/* <FacebookLoginComponent /> */}
                        <button style={{backgroundColor: '#003959'}}>Sign In</button>
                    </form>
                    <p>
                        Need an Account?<br />
                        <span className="line">
                            {/*put router link here*/}
                            <a href="/register">Sign Up</a>
                        </span>
                    </p>
                </section>
            )}
        </>
    )
}

export default Login